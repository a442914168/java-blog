<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bobo.mybatis.dao.EmployeeMapperPluse">

    <!--自定义某个javaBean的封装规则
	        type：自定义规则的Java类型
	        id:唯一id方便引用
	-->
    <resultMap id="MySimpleEmp" type="emp">
        <!--指定主键列的封装规则
		        id定义主键会底层有优化；
		        column：指定哪一列
		        property：指定对应的javaBean属性
		-->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName"/>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>

    <!--/* 根据id获取，并且返回是ResultMap操作 */-->
    <!--Employee getEmpByIdResultMap(Integer id);-->
    <select id="getEmpByIdResultMap" resultMap="MySimpleEmp">
        select *
        from tbl_employee
        where id=#{id}
    </select>

    <!--将对应的值一一设置-->
    <resultMap id="resultMap4Dept" type="emp">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <!--直接属性.属性方法设置-->
        <result column="did" property="department.deptID"/>
        <result column="dept_name" property="department.deptName"/>
    </resultMap>

    <!--/* 获取员工信息，并且包含其的部门信息 */-->
    <!--Employee getEmpAndDept(Integer id);-->
    <select id="getEmpAndDept" resultMap="resultMap4Dept">
 		SELECT e.id id,e.last_name last_name,e.gender gender,e.d_id d_id,
		       d.id did,d.dept_name dept_name
		FROM tbl_employee e,tbl_dept d
		WHERE e.d_id=d.id
		AND e.id=#{id}
    </select>

    <!--使用association定义关联的单个对象的封装规则；-->
    <resultMap id="resultMap4DeptAssociation" type="emp">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--Department值得封装使用 association-->
        <!--association可以指定联合的javaBean对象
		    property="department"：指定哪个属性是联合的对象
		    javaType:指定这个属性对象的类型[不能省略]
		-->
        <association property="department" javaType="dept">
            <id column="did" property="deptID"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>

    <!--/* 获取员工信息，并且包含其的部门信息 使用association方式*/-->
    <!--Employee getEmpAndDeptAssociation(Integer id);-->
    <select id="getEmpAndDeptAssociation" resultMap="resultMap4DeptAssociation">
 		SELECT e.id id,e.last_name last_name,e.gender gender,e.d_id d_id,
		       d.id did,d.dept_name dept_name
		FROM tbl_employee e,tbl_dept d
		WHERE e.d_id=d.id
		AND e.id=#{id}
    </select>

    <!--使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	-->
    <resultMap id="resultMap4DeptStep" type="emp">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>

        <!--association定义关联对象的封装规则
	 		    select:表明当前属性是调用select指定的方法查出的结果
	 		    column:指定将哪一列的值传给这个方法

	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
	 	 -->
        <association property="department"
                     select="com.bobo.mybatis.dao.DepartmentMapper.getDeptById"
                     column="d_id">
        </association>

    </resultMap>

    <!--/* 获取员工信息，并且包含其的部门信息 使用association 分步查询方式*/-->
    <!--Employee getEmpAndDeptStep(Integer id);-->
    <select id="getEmpAndDeptStep" resultMap="resultMap4DeptStep">
      SELECT *
      FROM tbl_employee
      WHERE id=#{id}
    </select>

    <!--/* 根据ID查询雇员信息 */-->
    <!--List<Employee> getEmpsByDeptId(Integer id);-->
    <select id="getEmpsByDeptId" resultType="emp">
      select *
      from tbl_employee
      where d_id=#{deptId}
    </select>

    <!-- =======================鉴别器============================ -->
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Employee：
            如果查出的是女生：就把部门信息查询出来，否则不查询；
            如果是男生，把last_name这一列的值赋值给email;
     -->
    <resultMap id="MyEmpDis" type="emp">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--
            column：指定判定的列名
            javaType：列值对应的java类型  -->
        <discriminator javaType="string" column="gender">
            <!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap-->
            <case value="0" resultType="emp">
                <association property="dept"
                             select="com.bobo.mybatis.dao.DepartmentMapper.getDeptById"
                             column="d_id">
                </association>
            </case>
            <!--男生 ;如果是男生，把last_name这一列的值赋值给email; -->
            <case value="1" resultType="emp">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="email"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>

</mapper>