<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bobo.mybatis.dao.EmployeeMapper">

    <!--/* 添加 */-->
    <!--void addEmp(Employee emp);-->
    <!-- parameterType：参数类型，可以省略，
    获取自增主键的值：
        mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
        useGeneratedKeys="true"；使用自增主键获取主键值策略
        keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
    -->
    <insert id="addEmp" useGeneratedKeys="true" keyProperty="id">
		insert into tbl_employee(last_name,email,gender)
		values(#{lastName},#{email},#{gender})
	</insert>

    <!--
    获取非自增主键的值：
        Oracle不支持自增；Oracle使用序列来模拟自增；
        每次插入的数据的主键是从序列中拿到的值；
     -->
    <insert id="addEmp" databaseId="oracle">
        <!--
        keyProperty:查出的主键值封装给javaBean的哪个属性
        order="BEFORE":当前sql在插入sql之前运行
               AFTER：当前sql在插入sql之后运行
        resultType:查出的数据的返回值类型

        BEFORE运行顺序：
            先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
            在运行插入的sql；就可以取出id属性对应的值
        AFTER运行顺序：
            先运行插入的sql（从序列中取出新值作为id）；
            再运行selectKey查询id的sql；
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的sql语句 -->
            <!-- BEFORE-->
            select EMPLOYEES_SEQ.nextval from dual
            <!-- AFTER：
             select EMPLOYEES_SEQ.currval from dual -->
        </selectKey>

        <!-- 插入时的主键是从序列中拿到的 -->
        <!-- BEFORE:-->
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email})
        <!-- AFTER：
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(employees_seq.nextval,#{lastName},#{email}) -->
    </insert>

    <!--/* 删除 */-->
    <!--void deleteEmpById(Integer id);-->
    <delete id="deleteEmpById">
		delete from tbl_employee
		where id=#{id}
	</delete>

    <!--/* 修改 */-->
    <!--boolean updateEmpById(Employee employee);-->
    <update id="updateEmp">
		update tbl_employee
		set last_name=#{lastName},email=#{email},gender=#{gender}
		where id=#{id}
	</update>

    <!--/* 查询 */-->
    <!--Employee getEmpById(Integer id);-->
    <select id="getEmpById" resultType="emp">
        select * from tbl_employee where id=${id}
		from tbl_employee
		where id = #{id}
	</select>

    <!--/* 使用$与#符号获取值 */-->
    <!--Employee getEmpByMap(Map<String, Object> map);-->
    <select id="getEmpByMap" resultType="emp">
 		select * from ${tableName} where id=${id} and last_name=#{lastName}
 	</select>

    <!--/* 返回List集合 */-->
    <!--List<Employee> getList(String lastName);-->
    <!--resultType：如果返回的是一个集合，要写集合中元素的类型  -->
    <select id="getList" resultType="emp">
        select *
        from tbl_employee
        where last_name
        like #{lastName}
    </select>

    <!--/* 返回Map key就是列名，value就是对应的值 */-->
    <!--Map<String, Object> getMapSingle(Integer id);-->
    <select id="getMapSingle" resultType="map">
 		select *
 		from tbl_employee
 		where id=#{id}
 	</select>

    <!--//多条记录封装一个map：Map<String,Employee>:键是这条记录的主键，值是记录封装后的javaBean-->
    <!--//@MapKey:告诉mybatis封装这个map的时候使用哪个属性作为map的key-->
    <!--@MapKey("lastName")-->
    <!--Map<String, Employee> getMapList(String lastName);-->
    <select id="getMapList" resultType="emp">
 		select *
 		from tbl_employee
 		where last_name
 		like #{lastName}
 	</select>

</mapper>